// @ts-nocheck
const ethers = require("ethers")
const fs = require("fs")
const readline = require("readline")
require("dotenv").config()

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)

  /* Create a wallet from encrrypted private key */
  const encryptedJsonKey = fs.readFileSync("./.encryptedKey.json", "utf8")
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJsonKey,
    process.env.PASSWORD
  )
  wallet = await wallet.connect(provider)

  // /* Create a wallet from plain private key */
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  )

  /* Deploying with EthersJS */
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet)

  console.log("Please wait, your contract is deploying...")
  const contract = await contractFactory.deploy()
  console.log(`Contract Address: ${contract.address}`)

  const txReceipt = await contract.deployTransaction.wait(1)
  console.log("Transaction Receipt - deploy")
  console.log(txReceipt)

  let favoriteNum = await contract.retrieve()
  console.log(`Current Favorite Number: ${favoriteNum.toString()}`)

  const txResponse = await contract.store("50")
  const storeTxReceipt = await txResponse.wait(1)

  console.log("Transaction Receipt - fn: store()")
  console.log(storeTxReceipt)

  favoriteNum = await contract.retrieve()
  console.log(`Current Favorite Number: ${favoriteNum.toString()}`)

  // /* Deploying without EthersJS */
  // const nonce = await wallet.getTransactionCount();
  // const chainId = provider.network.chainId;
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 6721975,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b50610886806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780636057361d146100855780636f760f41146100a15780638bab8dd5146100bd5780639e7a13ad146100ed578063cad0899b1461011e575b600080fd5b61006f61014e565b60405161007c91906103ad565b60405180910390f35b61009f600480360381019061009a9190610408565b610157565b005b6100bb60048036038101906100b6919061057b565b610161565b005b6100d760048036038101906100d291906105d7565b6101f1565b6040516100e491906103ad565b60405180910390f35b61010760048036038101906101029190610408565b61021f565b6040516101159291906106a8565b60405180910390f35b610138600480360381019061013391906106d8565b6102db565b60405161014591906103ad565b60405180910390f35b60008054905090565b8060008190555050565b6001604051806040016040528084815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906101bd9291906102f1565b50602082015181600101555050806002836040516101db9190610754565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061022f57600080fd5b90600052602060002090600202016000915090508060000180546102529061079a565b80601f016020809104026020016040519081016040528092919081815260200182805461027e9061079a565b80156102cb5780601f106102a0576101008083540402835291602001916102cb565b820191906000526020600020905b8154815290600101906020018083116102ae57829003601f168201915b5050505050908060010154905082565b600081836102e991906107fa565b905092915050565b8280546102fd9061079a565b90600052602060002090601f01602090048101928261031f5760008555610366565b82601f1061033857805160ff1916838001178555610366565b82800160010185558215610366579182015b8281111561036557825182559160200191906001019061034a565b5b5090506103739190610377565b5090565b5b80821115610390576000816000905550600101610378565b5090565b6000819050919050565b6103a781610394565b82525050565b60006020820190506103c2600083018461039e565b92915050565b6000604051905090565b600080fd5b600080fd5b6103e581610394565b81146103f057600080fd5b50565b600081359050610402816103dc565b92915050565b60006020828403121561041e5761041d6103d2565b5b600061042c848285016103f3565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104888261043f565b810181811067ffffffffffffffff821117156104a7576104a6610450565b5b80604052505050565b60006104ba6103c8565b90506104c6828261047f565b919050565b600067ffffffffffffffff8211156104e6576104e5610450565b5b6104ef8261043f565b9050602081019050919050565b82818337600083830152505050565b600061051e610519846104cb565b6104b0565b90508281526020810184848401111561053a5761053961043a565b5b6105458482856104fc565b509392505050565b600082601f83011261056257610561610435565b5b813561057284826020860161050b565b91505092915050565b60008060408385031215610592576105916103d2565b5b600083013567ffffffffffffffff8111156105b0576105af6103d7565b5b6105bc8582860161054d565b92505060206105cd858286016103f3565b9150509250929050565b6000602082840312156105ed576105ec6103d2565b5b600082013567ffffffffffffffff81111561060b5761060a6103d7565b5b6106178482850161054d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561065a57808201518184015260208101905061063f565b83811115610669576000848401525b50505050565b600061067a82610620565b610684818561062b565b935061069481856020860161063c565b61069d8161043f565b840191505092915050565b600060408201905081810360008301526106c2818561066f565b90506106d1602083018461039e565b9392505050565b600080604083850312156106ef576106ee6103d2565b5b60006106fd858286016103f3565b925050602061070e858286016103f3565b9150509250929050565b600081905092915050565b600061072e82610620565b6107388185610718565b935061074881856020860161063c565b80840191505092915050565b60006107608284610723565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107b257607f821691505b6020821081036107c5576107c461076b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061080582610394565b915061081083610394565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610845576108446107cb565b5b82820190509291505056fea26469706673582212204c7031044b7f7124505b837682b36743e7016513a1415e7aecb92bb4753d622f64736f6c634300080e0033",
  //   chainId: chainId,
  // };
  // const sentTx = await wallet.sendTransaction(tx);
  // await sentTx.wait(1);
  // console.log(sentTx);
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
